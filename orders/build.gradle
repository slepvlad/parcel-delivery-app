plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.4'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.guavapay'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.1")
	openApiVersion = '2.0.2'
	testContainersVersion = '1.17.6'
	springSecurityTestVersion = '6.0.2'
	commonIoVersion = '2.11.0'
	mapstructVersion = '1.5.3.Final'
	lombokMapstructBindingVersion = '0.2.0'
	retryVersion = '2.0.0'
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	"implementation 'org.springframework.retry:spring-retry:${retryVersion}'"

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.liquibase:liquibase-core'

	compileOnly 'org.projectlombok:lombok'
	compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	implementation project(':common-lib:common-exception')

	implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${openApiVersion}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation("org.testcontainers:junit-jupiter:${testContainersVersion}")
	implementation(platform("org.testcontainers:testcontainers-bom:${testContainersVersion}"))
	testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
	testImplementation "org.springframework.security:spring-security-test:${springSecurityTestVersion}"
	testImplementation "commons-io:commons-io:${commonIoVersion}"

}

tasks.named('test') {
	useJUnitPlatform()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

